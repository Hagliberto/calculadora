import streamlit as st
import plotly.express as px
import pandas as pd
import os

# Diret√≥rio onde os hist√≥ricos di√°rios s√£o armazenados
DATA_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "data")

def carregar_historico_por_data(data_escolhida):
    """Carrega o hist√≥rico de pontua√ß√£o de um arquivo espec√≠fico baseado na data escolhida."""
    data_formatada = data_escolhida.strftime('%Y-%m-%d')
    arquivo_csv = os.path.join(DATA_DIR, f"historico_{data_formatada}.csv")

    if os.path.exists(arquivo_csv):
        return pd.read_csv(arquivo_csv)
    else:
        return pd.DataFrame(columns=['Nome', 'Data', 'Opera√ß√£o', 'Resultado'])

def exibir_historico():
    st.title(":blue[**Hist√≥rico de Pontua√ß√£o**]")

    # Seletor de data para escolher o hist√≥rico de um dia espec√≠fico
    data_selecionada = st.date_input("üìÖ Selecione a data do hist√≥rico:", value=pd.to_datetime("today"), format="DD/MM/YYYY")

    with st.expander(f"üìú :blue[**Hist√≥rico de Pontua√ß√£o**] ({data_selecionada.strftime('%d/%m/%Y')})", expanded=False):
        historico_df = carregar_historico_por_data(data_selecionada)
        st.success("Planilha de acertos e erros")
        st.data_editor(historico_df, use_container_width=True)

    if not historico_df.empty:
        estatisticas = historico_df.groupby(['Opera√ß√£o'])['Resultado'].value_counts().unstack().fillna(0).reset_index()

        # Criar uma legenda personalizada com estat√≠sticas
        estatisticas["Legenda"] = estatisticas.apply(
            lambda row: f"{row['Opera√ß√£o']} ‚úÖ {row.get('Certo', 0)} | ‚ùå {row.get('Errado', 0)}", axis=1
        )

        # Transformar para formato longo para exibi√ß√£o no gr√°fico
        estatisticas_long = estatisticas.melt(id_vars=['Opera√ß√£o', 'Legenda'], var_name='Resultado', value_name='Quantidade')

        fig = px.bar(
            estatisticas_long,
            x="Legenda",
            y="Quantidade",
            color="Resultado",
            barmode="stack",
            title=f"üìä Estat√≠sticas de Acertos e Erros ({data_selecionada.strftime('%d/%m/%Y')})",
            text="Quantidade",
            color_discrete_map={"Certo": "limegreen", "Errado": "crimson"}
        )
        fig.update_traces(textposition="inside")

        with st.expander("üìà :blue[**Estat√≠sticas do Dia**]", expanded=False):
            st.plotly_chart(fig)
